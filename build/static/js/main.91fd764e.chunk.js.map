{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","mondaySdk","useState","originalText","_setOriginalText","translationText","_setTranslationText","languages","_setLanguages","originalLanguage","_setOriginalLanguage","translationLanguage","_setTranslationLanguage","loading","_setLoading","error","_setError","useEffect","autoDetectLanguage","a","payload","text","Axios","post","then","data","detections","language","catch","err","console","length","get","map","value","code","label","name","className","options","find","item","onChange","e","minRows","target","type","onClick","translations","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.91fd764e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport Select from 'react-select'\nimport Axios from 'axios'\nimport './App.css'\nimport mondaySdk from 'monday-sdk-js'\n\nconst monday = mondaySdk()\n\nconst App = () => {\n  const [settings, _setSettings] = useState({})\n  const [name, _setName] = useState('')\n  const [originalText, _setOriginalText] = useState('')\n  const [translationText, _setTranslationText] = useState('')\n  const [languages, _setLanguages] = useState([])\n  const [originalLanguage, _setOriginalLanguage] = useState('')\n  const [translationLanguage, _setTranslationLanguage] = useState('')\n  const [loading, _setLoading] = useState(false)\n  const [error, _setError] = useState(false)\n\n  const handleOriginalText = e => _setOriginalText(e.target.value)\n\n  const handleOriginalLanguageSelection = e => _setOriginalLanguage(e.value)\n\n  const handleTranslationLanguageSelection = e => _setTranslationLanguage(e.value)\n\n  // handle errors\n  useEffect(() => {\n    _setError(false)\n  }, [originalLanguage, translationLanguage])\n\n  // request must be fixed\n  const handleOnClick = () => {\n    const payload = { text: originalText }\n\n    if (!originalLanguage) return _setError('Please select an original language')\n    if (!translationLanguage) return _setError('Please select a translation language')\n\n    Axios.post('https://translate.dev.jakubroman.com/api/text/translate', payload)\n      .then(({ data }) => _setTranslationText(data?.translations?.[0]))\n      .catch(err => console.error(err))\n  }\n\n  const autoDetectLanguage = async () => {\n    const payload = { text: originalText }\n\n    _setLoading(true)\n\n    await Axios.post('https://translate.dev.jakubroman.com/api/text/detect-language', payload)\n      .then(({ data }) => _setOriginalLanguage(data?.detections?.[0].language))\n      .then(() => _setLoading(false))\n      .catch(err => console.error(err))\n  }\n\n  // Auto-detect language, check is request pending/should occur/ as enough text to auto-detect\n  useEffect(() => {\n    if (!loading && !originalLanguage && originalText.length > 4) {\n      autoDetectLanguage()\n    }\n  }, [originalText])\n\n  // Fetch language list\n  useEffect(() => {\n    Axios.get('https://translate.dev.jakubroman.com/api/languages')\n      .then(({ data }) => {\n        return data?.languages?.map(language => {\n          return {\n            value: language.code,\n            label: language.name,\n          }\n        })\n      })\n      .then(languages => _setLanguages(languages))\n      .catch(err => console.error(err))\n  }, [])\n\n  return (\n    <div className=\"t__translation-page\">\n      <section className=\"translation-page\">\n        <div className=\"o__original-text\">\n          <div className=\"original-language\">\n            <h3>Original Language</h3>\n            <Select\n              className=\"original-language-select\"\n              options={languages}\n              value={languages.find(item => item.value === originalLanguage)}\n              onChange={handleOriginalLanguageSelection}\n            />\n          </div>\n          <TextareaAutosize minRows={5} onChange={handleOriginalText} />\n        </div>\n\n        <div className=\"o__translated-text\">\n          <div className=\"translation-language\">\n            <h3>Translation Language</h3>\n            <Select\n              className=\"translation-language-select\"\n              options={languages}\n              onChange={handleTranslationLanguageSelection}\n            />\n          </div>\n          <TextareaAutosize minRows={5} value={translationText} />\n        </div>\n\n        <div className=\"o__submit-button\">\n          <p className=\"error-message\">{error}</p>\n          <button type=\"button\" onClick={handleOnClick}>\n            Submit\n          </button>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}